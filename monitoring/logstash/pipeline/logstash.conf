input {
  beats {
    port => 5044
  }
  
  http {
    port => 8080
    codec => json
  }
}

filter {
  if [fields][service] {
    mutate {
      add_field => { "service_name" => "%{[fields][service]}" }
    }
  }
  
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # Parse Go logs
  grok {
    match => { 
      "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message_text}"
    }
    tag_on_failure => ["_grokparsefailure"]
  }
  
  # Parse gRPC logs
  if [service_name] and [service_name] =~ /grpc/ {
    grok {
      match => {
        "message" => "grpc_service=%{WORD:grpc_service} grpc_method=%{WORD:grpc_method} grpc_code=%{WORD:grpc_code} duration=%{NUMBER:grpc_duration:float}"
      }
    }
  }
  
  # Parse HTTP logs
  if [message] =~ /HTTP/ {
    grok {
      match => {
        "message" => "%{WORD:http_method} %{URIPATH:http_path} %{NUMBER:http_status:int} %{NUMBER:http_duration:float}"
      }
    }
  }
  
  # Add timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
  }
  
  # Remove unwanted fields
  mutate {
    remove_field => [ "host", "agent", "ecs", "tags" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "rideshare-logs-%{+YYYY.MM.dd}"
  }
  
  # Debug output
  stdout {
    codec => rubydebug
  }
}
