// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: proto/matching/matching.proto

package matching

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Location represents a geographical coordinate
type Location struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      float64                `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_proto_matching_matching_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{0}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Driver information for matching
type Driver struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CurrentLocation *Location              `protobuf:"bytes,3,opt,name=current_location,json=currentLocation,proto3" json:"current_location,omitempty"`
	VehicleId       string                 `protobuf:"bytes,4,opt,name=vehicle_id,json=vehicleId,proto3" json:"vehicle_id,omitempty"`
	VehicleType     string                 `protobuf:"bytes,5,opt,name=vehicle_type,json=vehicleType,proto3" json:"vehicle_type,omitempty"`
	Rating          float64                `protobuf:"fixed64,6,opt,name=rating,proto3" json:"rating,omitempty"`
	TotalTrips      int32                  `protobuf:"varint,7,opt,name=total_trips,json=totalTrips,proto3" json:"total_trips,omitempty"`
	IsAvailable     bool                   `protobuf:"varint,8,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	DistanceKm      float64                `protobuf:"fixed64,9,opt,name=distance_km,json=distanceKm,proto3" json:"distance_km,omitempty"`
	EtaMinutes      int32                  `protobuf:"varint,10,opt,name=eta_minutes,json=etaMinutes,proto3" json:"eta_minutes,omitempty"`
	Score           *MatchingScore         `protobuf:"bytes,11,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Driver) Reset() {
	*x = Driver{}
	mi := &file_proto_matching_matching_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Driver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Driver) ProtoMessage() {}

func (x *Driver) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Driver.ProtoReflect.Descriptor instead.
func (*Driver) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{1}
}

func (x *Driver) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Driver) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Driver) GetCurrentLocation() *Location {
	if x != nil {
		return x.CurrentLocation
	}
	return nil
}

func (x *Driver) GetVehicleId() string {
	if x != nil {
		return x.VehicleId
	}
	return ""
}

func (x *Driver) GetVehicleType() string {
	if x != nil {
		return x.VehicleType
	}
	return ""
}

func (x *Driver) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Driver) GetTotalTrips() int32 {
	if x != nil {
		return x.TotalTrips
	}
	return 0
}

func (x *Driver) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *Driver) GetDistanceKm() float64 {
	if x != nil {
		return x.DistanceKm
	}
	return 0
}

func (x *Driver) GetEtaMinutes() int32 {
	if x != nil {
		return x.EtaMinutes
	}
	return 0
}

func (x *Driver) GetScore() *MatchingScore {
	if x != nil {
		return x.Score
	}
	return nil
}

// Matching score breakdown
type MatchingScore struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TotalScore        float64                `protobuf:"fixed64,1,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	DistanceScore     float64                `protobuf:"fixed64,2,opt,name=distance_score,json=distanceScore,proto3" json:"distance_score,omitempty"`
	RatingScore       float64                `protobuf:"fixed64,3,opt,name=rating_score,json=ratingScore,proto3" json:"rating_score,omitempty"`
	AvailabilityScore float64                `protobuf:"fixed64,4,opt,name=availability_score,json=availabilityScore,proto3" json:"availability_score,omitempty"`
	DemandScore       float64                `protobuf:"fixed64,5,opt,name=demand_score,json=demandScore,proto3" json:"demand_score,omitempty"`
	HistoricalScore   float64                `protobuf:"fixed64,6,opt,name=historical_score,json=historicalScore,proto3" json:"historical_score,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchingScore) Reset() {
	*x = MatchingScore{}
	mi := &file_proto_matching_matching_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchingScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingScore) ProtoMessage() {}

func (x *MatchingScore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingScore.ProtoReflect.Descriptor instead.
func (*MatchingScore) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{2}
}

func (x *MatchingScore) GetTotalScore() float64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *MatchingScore) GetDistanceScore() float64 {
	if x != nil {
		return x.DistanceScore
	}
	return 0
}

func (x *MatchingScore) GetRatingScore() float64 {
	if x != nil {
		return x.RatingScore
	}
	return 0
}

func (x *MatchingScore) GetAvailabilityScore() float64 {
	if x != nil {
		return x.AvailabilityScore
	}
	return 0
}

func (x *MatchingScore) GetDemandScore() float64 {
	if x != nil {
		return x.DemandScore
	}
	return 0
}

func (x *MatchingScore) GetHistoricalScore() float64 {
	if x != nil {
		return x.HistoricalScore
	}
	return 0
}

// Ride request for matching
type RideRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RiderId        string                 `protobuf:"bytes,2,opt,name=rider_id,json=riderId,proto3" json:"rider_id,omitempty"`
	PickupLocation *Location              `protobuf:"bytes,3,opt,name=pickup_location,json=pickupLocation,proto3" json:"pickup_location,omitempty"`
	Destination    *Location              `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	VehicleType    string                 `protobuf:"bytes,5,opt,name=vehicle_type,json=vehicleType,proto3" json:"vehicle_type,omitempty"`
	PassengerCount int32                  `protobuf:"varint,6,opt,name=passenger_count,json=passengerCount,proto3" json:"passenger_count,omitempty"`
	RequestedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	Preferences    map[string]string      `protobuf:"bytes,8,rep,name=preferences,proto3" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RideRequest) Reset() {
	*x = RideRequest{}
	mi := &file_proto_matching_matching_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideRequest) ProtoMessage() {}

func (x *RideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideRequest.ProtoReflect.Descriptor instead.
func (*RideRequest) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{3}
}

func (x *RideRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RideRequest) GetRiderId() string {
	if x != nil {
		return x.RiderId
	}
	return ""
}

func (x *RideRequest) GetPickupLocation() *Location {
	if x != nil {
		return x.PickupLocation
	}
	return nil
}

func (x *RideRequest) GetDestination() *Location {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *RideRequest) GetVehicleType() string {
	if x != nil {
		return x.VehicleType
	}
	return ""
}

func (x *RideRequest) GetPassengerCount() int32 {
	if x != nil {
		return x.PassengerCount
	}
	return 0
}

func (x *RideRequest) GetRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

func (x *RideRequest) GetPreferences() map[string]string {
	if x != nil {
		return x.Preferences
	}
	return nil
}

// Matching result
type MatchResult struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RequestId      string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	MatchedDrivers []*Driver              `protobuf:"bytes,2,rep,name=matched_drivers,json=matchedDrivers,proto3" json:"matched_drivers,omitempty"`
	BestMatch      *Driver                `protobuf:"bytes,3,opt,name=best_match,json=bestMatch,proto3" json:"best_match,omitempty"`
	Metadata       *MatchingMetadata      `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Success        bool                   `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	Message        string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MatchResult) Reset() {
	*x = MatchResult{}
	mi := &file_proto_matching_matching_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResult) ProtoMessage() {}

func (x *MatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResult.ProtoReflect.Descriptor instead.
func (*MatchResult) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{4}
}

func (x *MatchResult) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *MatchResult) GetMatchedDrivers() []*Driver {
	if x != nil {
		return x.MatchedDrivers
	}
	return nil
}

func (x *MatchResult) GetBestMatch() *Driver {
	if x != nil {
		return x.BestMatch
	}
	return nil
}

func (x *MatchResult) GetMetadata() *MatchingMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MatchResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MatchResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Matching metadata
type MatchingMetadata struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	TotalDriversConsidered int32                  `protobuf:"varint,1,opt,name=total_drivers_considered,json=totalDriversConsidered,proto3" json:"total_drivers_considered,omitempty"`
	AvailableDriversInArea int32                  `protobuf:"varint,2,opt,name=available_drivers_in_area,json=availableDriversInArea,proto3" json:"available_drivers_in_area,omitempty"`
	SearchRadiusKm         float64                `protobuf:"fixed64,3,opt,name=search_radius_km,json=searchRadiusKm,proto3" json:"search_radius_km,omitempty"`
	ProcessingTimeMs       int32                  `protobuf:"varint,4,opt,name=processing_time_ms,json=processingTimeMs,proto3" json:"processing_time_ms,omitempty"`
	AlgorithmVersion       string                 `protobuf:"bytes,5,opt,name=algorithm_version,json=algorithmVersion,proto3" json:"algorithm_version,omitempty"`
	AlgorithmWeights       map[string]float64     `protobuf:"bytes,6,rep,name=algorithm_weights,json=algorithmWeights,proto3" json:"algorithm_weights,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MatchingMetadata) Reset() {
	*x = MatchingMetadata{}
	mi := &file_proto_matching_matching_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingMetadata) ProtoMessage() {}

func (x *MatchingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingMetadata.ProtoReflect.Descriptor instead.
func (*MatchingMetadata) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{5}
}

func (x *MatchingMetadata) GetTotalDriversConsidered() int32 {
	if x != nil {
		return x.TotalDriversConsidered
	}
	return 0
}

func (x *MatchingMetadata) GetAvailableDriversInArea() int32 {
	if x != nil {
		return x.AvailableDriversInArea
	}
	return 0
}

func (x *MatchingMetadata) GetSearchRadiusKm() float64 {
	if x != nil {
		return x.SearchRadiusKm
	}
	return 0
}

func (x *MatchingMetadata) GetProcessingTimeMs() int32 {
	if x != nil {
		return x.ProcessingTimeMs
	}
	return 0
}

func (x *MatchingMetadata) GetAlgorithmVersion() string {
	if x != nil {
		return x.AlgorithmVersion
	}
	return ""
}

func (x *MatchingMetadata) GetAlgorithmWeights() map[string]float64 {
	if x != nil {
		return x.AlgorithmWeights
	}
	return nil
}

// Real-time driver tracking
type DriverLocationUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverId      string                 `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	Location      *Location              `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	IsAvailable   bool                   `protobuf:"varint,3,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DriverLocationUpdate) Reset() {
	*x = DriverLocationUpdate{}
	mi := &file_proto_matching_matching_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverLocationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverLocationUpdate) ProtoMessage() {}

func (x *DriverLocationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverLocationUpdate.ProtoReflect.Descriptor instead.
func (*DriverLocationUpdate) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{6}
}

func (x *DriverLocationUpdate) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *DriverLocationUpdate) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DriverLocationUpdate) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *DriverLocationUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DriverLocationUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Request/Response messages
type FindNearbyDriversRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PickupLocation *Location              `protobuf:"bytes,1,opt,name=pickup_location,json=pickupLocation,proto3" json:"pickup_location,omitempty"`
	VehicleType    string                 `protobuf:"bytes,2,opt,name=vehicle_type,json=vehicleType,proto3" json:"vehicle_type,omitempty"`
	RadiusKm       float64                `protobuf:"fixed64,3,opt,name=radius_km,json=radiusKm,proto3" json:"radius_km,omitempty"`
	MaxDrivers     int32                  `protobuf:"varint,4,opt,name=max_drivers,json=maxDrivers,proto3" json:"max_drivers,omitempty"`
	Filters        map[string]string      `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FindNearbyDriversRequest) Reset() {
	*x = FindNearbyDriversRequest{}
	mi := &file_proto_matching_matching_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindNearbyDriversRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNearbyDriversRequest) ProtoMessage() {}

func (x *FindNearbyDriversRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNearbyDriversRequest.ProtoReflect.Descriptor instead.
func (*FindNearbyDriversRequest) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{7}
}

func (x *FindNearbyDriversRequest) GetPickupLocation() *Location {
	if x != nil {
		return x.PickupLocation
	}
	return nil
}

func (x *FindNearbyDriversRequest) GetVehicleType() string {
	if x != nil {
		return x.VehicleType
	}
	return ""
}

func (x *FindNearbyDriversRequest) GetRadiusKm() float64 {
	if x != nil {
		return x.RadiusKm
	}
	return 0
}

func (x *FindNearbyDriversRequest) GetMaxDrivers() int32 {
	if x != nil {
		return x.MaxDrivers
	}
	return 0
}

func (x *FindNearbyDriversRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

type FindNearbyDriversResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Drivers       []*Driver              `protobuf:"bytes,1,rep,name=drivers,proto3" json:"drivers,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Metadata      *MatchingMetadata      `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindNearbyDriversResponse) Reset() {
	*x = FindNearbyDriversResponse{}
	mi := &file_proto_matching_matching_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindNearbyDriversResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNearbyDriversResponse) ProtoMessage() {}

func (x *FindNearbyDriversResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNearbyDriversResponse.ProtoReflect.Descriptor instead.
func (*FindNearbyDriversResponse) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{8}
}

func (x *FindNearbyDriversResponse) GetDrivers() []*Driver {
	if x != nil {
		return x.Drivers
	}
	return nil
}

func (x *FindNearbyDriversResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *FindNearbyDriversResponse) GetMetadata() *MatchingMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MatchDriverRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RideRequest   *RideRequest           `protobuf:"bytes,1,opt,name=ride_request,json=rideRequest,proto3" json:"ride_request,omitempty"`
	Preferences   *MatchingPreferences   `protobuf:"bytes,2,opt,name=preferences,proto3" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchDriverRequest) Reset() {
	*x = MatchDriverRequest{}
	mi := &file_proto_matching_matching_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDriverRequest) ProtoMessage() {}

func (x *MatchDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDriverRequest.ProtoReflect.Descriptor instead.
func (*MatchDriverRequest) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{9}
}

func (x *MatchDriverRequest) GetRideRequest() *RideRequest {
	if x != nil {
		return x.RideRequest
	}
	return nil
}

func (x *MatchDriverRequest) GetPreferences() *MatchingPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type MatchingPreferences struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	MaxPickupDistanceKm      float64                `protobuf:"fixed64,1,opt,name=max_pickup_distance_km,json=maxPickupDistanceKm,proto3" json:"max_pickup_distance_km,omitempty"`
	MinDriverRating          float64                `protobuf:"fixed64,2,opt,name=min_driver_rating,json=minDriverRating,proto3" json:"min_driver_rating,omitempty"`
	PreferExperiencedDrivers bool                   `protobuf:"varint,3,opt,name=prefer_experienced_drivers,json=preferExperiencedDrivers,proto3" json:"prefer_experienced_drivers,omitempty"`
	AllowPoolMatching        bool                   `protobuf:"varint,4,opt,name=allow_pool_matching,json=allowPoolMatching,proto3" json:"allow_pool_matching,omitempty"`
	CustomPreferences        map[string]string      `protobuf:"bytes,5,rep,name=custom_preferences,json=customPreferences,proto3" json:"custom_preferences,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *MatchingPreferences) Reset() {
	*x = MatchingPreferences{}
	mi := &file_proto_matching_matching_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchingPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingPreferences) ProtoMessage() {}

func (x *MatchingPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingPreferences.ProtoReflect.Descriptor instead.
func (*MatchingPreferences) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{10}
}

func (x *MatchingPreferences) GetMaxPickupDistanceKm() float64 {
	if x != nil {
		return x.MaxPickupDistanceKm
	}
	return 0
}

func (x *MatchingPreferences) GetMinDriverRating() float64 {
	if x != nil {
		return x.MinDriverRating
	}
	return 0
}

func (x *MatchingPreferences) GetPreferExperiencedDrivers() bool {
	if x != nil {
		return x.PreferExperiencedDrivers
	}
	return false
}

func (x *MatchingPreferences) GetAllowPoolMatching() bool {
	if x != nil {
		return x.AllowPoolMatching
	}
	return false
}

func (x *MatchingPreferences) GetCustomPreferences() map[string]string {
	if x != nil {
		return x.CustomPreferences
	}
	return nil
}

type MatchDriverResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *MatchResult           `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Errors        []string               `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchDriverResponse) Reset() {
	*x = MatchDriverResponse{}
	mi := &file_proto_matching_matching_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchDriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDriverResponse) ProtoMessage() {}

func (x *MatchDriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDriverResponse.ProtoReflect.Descriptor instead.
func (*MatchDriverResponse) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{11}
}

func (x *MatchDriverResponse) GetResult() *MatchResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MatchDriverResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MatchDriverResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MatchDriverResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type UpdateDriverLocationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverId      string                 `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	Location      *Location              `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	IsAvailable   bool                   `protobuf:"varint,3,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDriverLocationRequest) Reset() {
	*x = UpdateDriverLocationRequest{}
	mi := &file_proto_matching_matching_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDriverLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriverLocationRequest) ProtoMessage() {}

func (x *UpdateDriverLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriverLocationRequest.ProtoReflect.Descriptor instead.
func (*UpdateDriverLocationRequest) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateDriverLocationRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

func (x *UpdateDriverLocationRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UpdateDriverLocationRequest) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *UpdateDriverLocationRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UpdateDriverLocationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDriverLocationResponse) Reset() {
	*x = UpdateDriverLocationResponse{}
	mi := &file_proto_matching_matching_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDriverLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDriverLocationResponse) ProtoMessage() {}

func (x *UpdateDriverLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDriverLocationResponse.ProtoReflect.Descriptor instead.
func (*UpdateDriverLocationResponse) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateDriverLocationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateDriverLocationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetDriverRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverId      string                 `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDriverRequest) Reset() {
	*x = GetDriverRequest{}
	mi := &file_proto_matching_matching_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriverRequest) ProtoMessage() {}

func (x *GetDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriverRequest.ProtoReflect.Descriptor instead.
func (*GetDriverRequest) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{14}
}

func (x *GetDriverRequest) GetDriverId() string {
	if x != nil {
		return x.DriverId
	}
	return ""
}

type GetDriverResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        *Driver                `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Found         bool                   `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDriverResponse) Reset() {
	*x = GetDriverResponse{}
	mi := &file_proto_matching_matching_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDriverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriverResponse) ProtoMessage() {}

func (x *GetDriverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriverResponse.ProtoReflect.Descriptor instead.
func (*GetDriverResponse) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{15}
}

func (x *GetDriverResponse) GetDriver() *Driver {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *GetDriverResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

type GetActiveDriversRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Center        *Location              `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	RadiusKm      float64                `protobuf:"fixed64,2,opt,name=radius_km,json=radiusKm,proto3" json:"radius_km,omitempty"`
	VehicleType   string                 `protobuf:"bytes,3,opt,name=vehicle_type,json=vehicleType,proto3" json:"vehicle_type,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveDriversRequest) Reset() {
	*x = GetActiveDriversRequest{}
	mi := &file_proto_matching_matching_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveDriversRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveDriversRequest) ProtoMessage() {}

func (x *GetActiveDriversRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveDriversRequest.ProtoReflect.Descriptor instead.
func (*GetActiveDriversRequest) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{16}
}

func (x *GetActiveDriversRequest) GetCenter() *Location {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *GetActiveDriversRequest) GetRadiusKm() float64 {
	if x != nil {
		return x.RadiusKm
	}
	return 0
}

func (x *GetActiveDriversRequest) GetVehicleType() string {
	if x != nil {
		return x.VehicleType
	}
	return ""
}

func (x *GetActiveDriversRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetActiveDriversResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Drivers       []*Driver              `protobuf:"bytes,1,rep,name=drivers,proto3" json:"drivers,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Metadata      *MatchingMetadata      `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveDriversResponse) Reset() {
	*x = GetActiveDriversResponse{}
	mi := &file_proto_matching_matching_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveDriversResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveDriversResponse) ProtoMessage() {}

func (x *GetActiveDriversResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveDriversResponse.ProtoReflect.Descriptor instead.
func (*GetActiveDriversResponse) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{17}
}

func (x *GetActiveDriversResponse) GetDrivers() []*Driver {
	if x != nil {
		return x.Drivers
	}
	return nil
}

func (x *GetActiveDriversResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetActiveDriversResponse) GetMetadata() *MatchingMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Batch operations
type BatchUpdateDriversRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Updates       []*DriverLocationUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateDriversRequest) Reset() {
	*x = BatchUpdateDriversRequest{}
	mi := &file_proto_matching_matching_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateDriversRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateDriversRequest) ProtoMessage() {}

func (x *BatchUpdateDriversRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateDriversRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateDriversRequest) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{18}
}

func (x *BatchUpdateDriversRequest) GetUpdates() []*DriverLocationUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type BatchUpdateDriversResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SuccessfulUpdates int32                  `protobuf:"varint,1,opt,name=successful_updates,json=successfulUpdates,proto3" json:"successful_updates,omitempty"`
	FailedUpdates     int32                  `protobuf:"varint,2,opt,name=failed_updates,json=failedUpdates,proto3" json:"failed_updates,omitempty"`
	Errors            []string               `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BatchUpdateDriversResponse) Reset() {
	*x = BatchUpdateDriversResponse{}
	mi := &file_proto_matching_matching_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateDriversResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateDriversResponse) ProtoMessage() {}

func (x *BatchUpdateDriversResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateDriversResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateDriversResponse) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{19}
}

func (x *BatchUpdateDriversResponse) GetSuccessfulUpdates() int32 {
	if x != nil {
		return x.SuccessfulUpdates
	}
	return 0
}

func (x *BatchUpdateDriversResponse) GetFailedUpdates() int32 {
	if x != nil {
		return x.FailedUpdates
	}
	return 0
}

func (x *BatchUpdateDriversResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Performance metrics
type GetMatchingStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromTime      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	ToTime        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMatchingStatsRequest) Reset() {
	*x = GetMatchingStatsRequest{}
	mi := &file_proto_matching_matching_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchingStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchingStatsRequest) ProtoMessage() {}

func (x *GetMatchingStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchingStatsRequest.ProtoReflect.Descriptor instead.
func (*GetMatchingStatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{20}
}

func (x *GetMatchingStatsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *GetMatchingStatsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

type MatchingStats struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	TotalRequests           int32                  `protobuf:"varint,1,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	SuccessfulMatches       int32                  `protobuf:"varint,2,opt,name=successful_matches,json=successfulMatches,proto3" json:"successful_matches,omitempty"`
	FailedMatches           int32                  `protobuf:"varint,3,opt,name=failed_matches,json=failedMatches,proto3" json:"failed_matches,omitempty"`
	AverageMatchTimeMs      float64                `protobuf:"fixed64,4,opt,name=average_match_time_ms,json=averageMatchTimeMs,proto3" json:"average_match_time_ms,omitempty"`
	AveragePickupDistanceKm float64                `protobuf:"fixed64,5,opt,name=average_pickup_distance_km,json=averagePickupDistanceKm,proto3" json:"average_pickup_distance_km,omitempty"`
	MatchSuccessRate        float64                `protobuf:"fixed64,6,opt,name=match_success_rate,json=matchSuccessRate,proto3" json:"match_success_rate,omitempty"`
	VehicleTypeDistribution map[string]int32       `protobuf:"bytes,7,rep,name=vehicle_type_distribution,json=vehicleTypeDistribution,proto3" json:"vehicle_type_distribution,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MatchingStats) Reset() {
	*x = MatchingStats{}
	mi := &file_proto_matching_matching_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingStats) ProtoMessage() {}

func (x *MatchingStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingStats.ProtoReflect.Descriptor instead.
func (*MatchingStats) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{21}
}

func (x *MatchingStats) GetTotalRequests() int32 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

func (x *MatchingStats) GetSuccessfulMatches() int32 {
	if x != nil {
		return x.SuccessfulMatches
	}
	return 0
}

func (x *MatchingStats) GetFailedMatches() int32 {
	if x != nil {
		return x.FailedMatches
	}
	return 0
}

func (x *MatchingStats) GetAverageMatchTimeMs() float64 {
	if x != nil {
		return x.AverageMatchTimeMs
	}
	return 0
}

func (x *MatchingStats) GetAveragePickupDistanceKm() float64 {
	if x != nil {
		return x.AveragePickupDistanceKm
	}
	return 0
}

func (x *MatchingStats) GetMatchSuccessRate() float64 {
	if x != nil {
		return x.MatchSuccessRate
	}
	return 0
}

func (x *MatchingStats) GetVehicleTypeDistribution() map[string]int32 {
	if x != nil {
		return x.VehicleTypeDistribution
	}
	return nil
}

type GetMatchingStatsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stats         *MatchingStats         `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMatchingStatsResponse) Reset() {
	*x = GetMatchingStatsResponse{}
	mi := &file_proto_matching_matching_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchingStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchingStatsResponse) ProtoMessage() {}

func (x *GetMatchingStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matching_matching_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchingStatsResponse.ProtoReflect.Descriptor instead.
func (*GetMatchingStatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_matching_matching_proto_rawDescGZIP(), []int{22}
}

func (x *GetMatchingStatsResponse) GetStats() *MatchingStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *GetMatchingStatsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_proto_matching_matching_proto protoreflect.FileDescriptor

const file_proto_matching_matching_proto_rawDesc = "" +
	"\n" +
	"\x1dproto/matching/matching.proto\x12\bmatching\x1a\x1fgoogle/protobuf/timestamp.proto\"^\n" +
	"\bLocation\x12\x1a\n" +
	"\blatitude\x18\x01 \x01(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x02 \x01(\x01R\tlongitude\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\"\xff\x02\n" +
	"\x06Driver\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12=\n" +
	"\x10current_location\x18\x03 \x01(\v2\x12.matching.LocationR\x0fcurrentLocation\x12\x1d\n" +
	"\n" +
	"vehicle_id\x18\x04 \x01(\tR\tvehicleId\x12!\n" +
	"\fvehicle_type\x18\x05 \x01(\tR\vvehicleType\x12\x16\n" +
	"\x06rating\x18\x06 \x01(\x01R\x06rating\x12\x1f\n" +
	"\vtotal_trips\x18\a \x01(\x05R\n" +
	"totalTrips\x12!\n" +
	"\fis_available\x18\b \x01(\bR\visAvailable\x12\x1f\n" +
	"\vdistance_km\x18\t \x01(\x01R\n" +
	"distanceKm\x12\x1f\n" +
	"\veta_minutes\x18\n" +
	" \x01(\x05R\n" +
	"etaMinutes\x12-\n" +
	"\x05score\x18\v \x01(\v2\x17.matching.MatchingScoreR\x05score\"\xf7\x01\n" +
	"\rMatchingScore\x12\x1f\n" +
	"\vtotal_score\x18\x01 \x01(\x01R\n" +
	"totalScore\x12%\n" +
	"\x0edistance_score\x18\x02 \x01(\x01R\rdistanceScore\x12!\n" +
	"\frating_score\x18\x03 \x01(\x01R\vratingScore\x12-\n" +
	"\x12availability_score\x18\x04 \x01(\x01R\x11availabilityScore\x12!\n" +
	"\fdemand_score\x18\x05 \x01(\x01R\vdemandScore\x12)\n" +
	"\x10historical_score\x18\x06 \x01(\x01R\x0fhistoricalScore\"\xc0\x03\n" +
	"\vRideRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\brider_id\x18\x02 \x01(\tR\ariderId\x12;\n" +
	"\x0fpickup_location\x18\x03 \x01(\v2\x12.matching.LocationR\x0epickupLocation\x124\n" +
	"\vdestination\x18\x04 \x01(\v2\x12.matching.LocationR\vdestination\x12!\n" +
	"\fvehicle_type\x18\x05 \x01(\tR\vvehicleType\x12'\n" +
	"\x0fpassenger_count\x18\x06 \x01(\x05R\x0epassengerCount\x12=\n" +
	"\frequested_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\vrequestedAt\x12H\n" +
	"\vpreferences\x18\b \x03(\v2&.matching.RideRequest.PreferencesEntryR\vpreferences\x1a>\n" +
	"\x10PreferencesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x84\x02\n" +
	"\vMatchResult\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x129\n" +
	"\x0fmatched_drivers\x18\x02 \x03(\v2\x10.matching.DriverR\x0ematchedDrivers\x12/\n" +
	"\n" +
	"best_match\x18\x03 \x01(\v2\x10.matching.DriverR\tbestMatch\x126\n" +
	"\bmetadata\x18\x04 \x01(\v2\x1a.matching.MatchingMetadataR\bmetadata\x12\x18\n" +
	"\asuccess\x18\x05 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x06 \x01(\tR\amessage\"\xb0\x03\n" +
	"\x10MatchingMetadata\x128\n" +
	"\x18total_drivers_considered\x18\x01 \x01(\x05R\x16totalDriversConsidered\x129\n" +
	"\x19available_drivers_in_area\x18\x02 \x01(\x05R\x16availableDriversInArea\x12(\n" +
	"\x10search_radius_km\x18\x03 \x01(\x01R\x0esearchRadiusKm\x12,\n" +
	"\x12processing_time_ms\x18\x04 \x01(\x05R\x10processingTimeMs\x12+\n" +
	"\x11algorithm_version\x18\x05 \x01(\tR\x10algorithmVersion\x12]\n" +
	"\x11algorithm_weights\x18\x06 \x03(\v20.matching.MatchingMetadata.AlgorithmWeightsEntryR\x10algorithmWeights\x1aC\n" +
	"\x15AlgorithmWeightsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"\xd8\x01\n" +
	"\x14DriverLocationUpdate\x12\x1b\n" +
	"\tdriver_id\x18\x01 \x01(\tR\bdriverId\x12.\n" +
	"\blocation\x18\x02 \x01(\v2\x12.matching.LocationR\blocation\x12!\n" +
	"\fis_available\x18\x03 \x01(\bR\visAvailable\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\xbf\x02\n" +
	"\x18FindNearbyDriversRequest\x12;\n" +
	"\x0fpickup_location\x18\x01 \x01(\v2\x12.matching.LocationR\x0epickupLocation\x12!\n" +
	"\fvehicle_type\x18\x02 \x01(\tR\vvehicleType\x12\x1b\n" +
	"\tradius_km\x18\x03 \x01(\x01R\bradiusKm\x12\x1f\n" +
	"\vmax_drivers\x18\x04 \x01(\x05R\n" +
	"maxDrivers\x12I\n" +
	"\afilters\x18\x05 \x03(\v2/.matching.FindNearbyDriversRequest.FiltersEntryR\afilters\x1a:\n" +
	"\fFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa0\x01\n" +
	"\x19FindNearbyDriversResponse\x12*\n" +
	"\adrivers\x18\x01 \x03(\v2\x10.matching.DriverR\adrivers\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x126\n" +
	"\bmetadata\x18\x03 \x01(\v2\x1a.matching.MatchingMetadataR\bmetadata\"\x8f\x01\n" +
	"\x12MatchDriverRequest\x128\n" +
	"\fride_request\x18\x01 \x01(\v2\x15.matching.RideRequestR\vrideRequest\x12?\n" +
	"\vpreferences\x18\x02 \x01(\v2\x1d.matching.MatchingPreferencesR\vpreferences\"\x8f\x03\n" +
	"\x13MatchingPreferences\x123\n" +
	"\x16max_pickup_distance_km\x18\x01 \x01(\x01R\x13maxPickupDistanceKm\x12*\n" +
	"\x11min_driver_rating\x18\x02 \x01(\x01R\x0fminDriverRating\x12<\n" +
	"\x1aprefer_experienced_drivers\x18\x03 \x01(\bR\x18preferExperiencedDrivers\x12.\n" +
	"\x13allow_pool_matching\x18\x04 \x01(\bR\x11allowPoolMatching\x12c\n" +
	"\x12custom_preferences\x18\x05 \x03(\v24.matching.MatchingPreferences.CustomPreferencesEntryR\x11customPreferences\x1aD\n" +
	"\x16CustomPreferencesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x90\x01\n" +
	"\x13MatchDriverResponse\x12-\n" +
	"\x06result\x18\x01 \x01(\v2\x15.matching.MatchResultR\x06result\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x16\n" +
	"\x06errors\x18\x04 \x03(\tR\x06errors\"\xa5\x01\n" +
	"\x1bUpdateDriverLocationRequest\x12\x1b\n" +
	"\tdriver_id\x18\x01 \x01(\tR\bdriverId\x12.\n" +
	"\blocation\x18\x02 \x01(\v2\x12.matching.LocationR\blocation\x12!\n" +
	"\fis_available\x18\x03 \x01(\bR\visAvailable\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\"R\n" +
	"\x1cUpdateDriverLocationResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"/\n" +
	"\x10GetDriverRequest\x12\x1b\n" +
	"\tdriver_id\x18\x01 \x01(\tR\bdriverId\"S\n" +
	"\x11GetDriverResponse\x12(\n" +
	"\x06driver\x18\x01 \x01(\v2\x10.matching.DriverR\x06driver\x12\x14\n" +
	"\x05found\x18\x02 \x01(\bR\x05found\"\x9b\x01\n" +
	"\x17GetActiveDriversRequest\x12*\n" +
	"\x06center\x18\x01 \x01(\v2\x12.matching.LocationR\x06center\x12\x1b\n" +
	"\tradius_km\x18\x02 \x01(\x01R\bradiusKm\x12!\n" +
	"\fvehicle_type\x18\x03 \x01(\tR\vvehicleType\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\"\x9f\x01\n" +
	"\x18GetActiveDriversResponse\x12*\n" +
	"\adrivers\x18\x01 \x03(\v2\x10.matching.DriverR\adrivers\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x126\n" +
	"\bmetadata\x18\x03 \x01(\v2\x1a.matching.MatchingMetadataR\bmetadata\"U\n" +
	"\x19BatchUpdateDriversRequest\x128\n" +
	"\aupdates\x18\x01 \x03(\v2\x1e.matching.DriverLocationUpdateR\aupdates\"\x8a\x01\n" +
	"\x1aBatchUpdateDriversResponse\x12-\n" +
	"\x12successful_updates\x18\x01 \x01(\x05R\x11successfulUpdates\x12%\n" +
	"\x0efailed_updates\x18\x02 \x01(\x05R\rfailedUpdates\x12\x16\n" +
	"\x06errors\x18\x03 \x03(\tR\x06errors\"\x87\x01\n" +
	"\x17GetMatchingStatsRequest\x127\n" +
	"\tfrom_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\"\xe8\x03\n" +
	"\rMatchingStats\x12%\n" +
	"\x0etotal_requests\x18\x01 \x01(\x05R\rtotalRequests\x12-\n" +
	"\x12successful_matches\x18\x02 \x01(\x05R\x11successfulMatches\x12%\n" +
	"\x0efailed_matches\x18\x03 \x01(\x05R\rfailedMatches\x121\n" +
	"\x15average_match_time_ms\x18\x04 \x01(\x01R\x12averageMatchTimeMs\x12;\n" +
	"\x1aaverage_pickup_distance_km\x18\x05 \x01(\x01R\x17averagePickupDistanceKm\x12,\n" +
	"\x12match_success_rate\x18\x06 \x01(\x01R\x10matchSuccessRate\x12p\n" +
	"\x19vehicle_type_distribution\x18\a \x03(\v24.matching.MatchingStats.VehicleTypeDistributionEntryR\x17vehicleTypeDistribution\x1aJ\n" +
	"\x1cVehicleTypeDistributionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"c\n" +
	"\x18GetMatchingStatsResponse\x12-\n" +
	"\x05stats\x18\x01 \x01(\v2\x17.matching.MatchingStatsR\x05stats\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess2\xe2\x05\n" +
	"\x0fMatchingService\x12\\\n" +
	"\x11FindNearbyDrivers\x12\".matching.FindNearbyDriversRequest\x1a#.matching.FindNearbyDriversResponse\x12J\n" +
	"\vMatchDriver\x12\x1c.matching.MatchDriverRequest\x1a\x1d.matching.MatchDriverResponse\x12e\n" +
	"\x14UpdateDriverLocation\x12%.matching.UpdateDriverLocationRequest\x1a&.matching.UpdateDriverLocationResponse\x12D\n" +
	"\tGetDriver\x12\x1a.matching.GetDriverRequest\x1a\x1b.matching.GetDriverResponse\x12Y\n" +
	"\x10GetActiveDrivers\x12!.matching.GetActiveDriversRequest\x1a\".matching.GetActiveDriversResponse\x12_\n" +
	"\x12BatchUpdateDrivers\x12#.matching.BatchUpdateDriversRequest\x1a$.matching.BatchUpdateDriversResponse\x12Y\n" +
	"\x10GetMatchingStats\x12!.matching.GetMatchingStatsRequest\x1a\".matching.GetMatchingStatsResponse\x12a\n" +
	"\x13StreamDriverUpdates\x12\x1e.matching.DriverLocationUpdate\x1a&.matching.UpdateDriverLocationResponse(\x010\x01B5Z3github.com/rideshare-platform/shared/proto/matchingb\x06proto3"

var (
	file_proto_matching_matching_proto_rawDescOnce sync.Once
	file_proto_matching_matching_proto_rawDescData []byte
)

func file_proto_matching_matching_proto_rawDescGZIP() []byte {
	file_proto_matching_matching_proto_rawDescOnce.Do(func() {
		file_proto_matching_matching_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_matching_matching_proto_rawDesc), len(file_proto_matching_matching_proto_rawDesc)))
	})
	return file_proto_matching_matching_proto_rawDescData
}

var file_proto_matching_matching_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_proto_matching_matching_proto_goTypes = []any{
	(*Location)(nil),                     // 0: matching.Location
	(*Driver)(nil),                       // 1: matching.Driver
	(*MatchingScore)(nil),                // 2: matching.MatchingScore
	(*RideRequest)(nil),                  // 3: matching.RideRequest
	(*MatchResult)(nil),                  // 4: matching.MatchResult
	(*MatchingMetadata)(nil),             // 5: matching.MatchingMetadata
	(*DriverLocationUpdate)(nil),         // 6: matching.DriverLocationUpdate
	(*FindNearbyDriversRequest)(nil),     // 7: matching.FindNearbyDriversRequest
	(*FindNearbyDriversResponse)(nil),    // 8: matching.FindNearbyDriversResponse
	(*MatchDriverRequest)(nil),           // 9: matching.MatchDriverRequest
	(*MatchingPreferences)(nil),          // 10: matching.MatchingPreferences
	(*MatchDriverResponse)(nil),          // 11: matching.MatchDriverResponse
	(*UpdateDriverLocationRequest)(nil),  // 12: matching.UpdateDriverLocationRequest
	(*UpdateDriverLocationResponse)(nil), // 13: matching.UpdateDriverLocationResponse
	(*GetDriverRequest)(nil),             // 14: matching.GetDriverRequest
	(*GetDriverResponse)(nil),            // 15: matching.GetDriverResponse
	(*GetActiveDriversRequest)(nil),      // 16: matching.GetActiveDriversRequest
	(*GetActiveDriversResponse)(nil),     // 17: matching.GetActiveDriversResponse
	(*BatchUpdateDriversRequest)(nil),    // 18: matching.BatchUpdateDriversRequest
	(*BatchUpdateDriversResponse)(nil),   // 19: matching.BatchUpdateDriversResponse
	(*GetMatchingStatsRequest)(nil),      // 20: matching.GetMatchingStatsRequest
	(*MatchingStats)(nil),                // 21: matching.MatchingStats
	(*GetMatchingStatsResponse)(nil),     // 22: matching.GetMatchingStatsResponse
	nil,                                  // 23: matching.RideRequest.PreferencesEntry
	nil,                                  // 24: matching.MatchingMetadata.AlgorithmWeightsEntry
	nil,                                  // 25: matching.FindNearbyDriversRequest.FiltersEntry
	nil,                                  // 26: matching.MatchingPreferences.CustomPreferencesEntry
	nil,                                  // 27: matching.MatchingStats.VehicleTypeDistributionEntry
	(*timestamppb.Timestamp)(nil),        // 28: google.protobuf.Timestamp
}
var file_proto_matching_matching_proto_depIdxs = []int32{
	0,  // 0: matching.Driver.current_location:type_name -> matching.Location
	2,  // 1: matching.Driver.score:type_name -> matching.MatchingScore
	0,  // 2: matching.RideRequest.pickup_location:type_name -> matching.Location
	0,  // 3: matching.RideRequest.destination:type_name -> matching.Location
	28, // 4: matching.RideRequest.requested_at:type_name -> google.protobuf.Timestamp
	23, // 5: matching.RideRequest.preferences:type_name -> matching.RideRequest.PreferencesEntry
	1,  // 6: matching.MatchResult.matched_drivers:type_name -> matching.Driver
	1,  // 7: matching.MatchResult.best_match:type_name -> matching.Driver
	5,  // 8: matching.MatchResult.metadata:type_name -> matching.MatchingMetadata
	24, // 9: matching.MatchingMetadata.algorithm_weights:type_name -> matching.MatchingMetadata.AlgorithmWeightsEntry
	0,  // 10: matching.DriverLocationUpdate.location:type_name -> matching.Location
	28, // 11: matching.DriverLocationUpdate.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 12: matching.FindNearbyDriversRequest.pickup_location:type_name -> matching.Location
	25, // 13: matching.FindNearbyDriversRequest.filters:type_name -> matching.FindNearbyDriversRequest.FiltersEntry
	1,  // 14: matching.FindNearbyDriversResponse.drivers:type_name -> matching.Driver
	5,  // 15: matching.FindNearbyDriversResponse.metadata:type_name -> matching.MatchingMetadata
	3,  // 16: matching.MatchDriverRequest.ride_request:type_name -> matching.RideRequest
	10, // 17: matching.MatchDriverRequest.preferences:type_name -> matching.MatchingPreferences
	26, // 18: matching.MatchingPreferences.custom_preferences:type_name -> matching.MatchingPreferences.CustomPreferencesEntry
	4,  // 19: matching.MatchDriverResponse.result:type_name -> matching.MatchResult
	0,  // 20: matching.UpdateDriverLocationRequest.location:type_name -> matching.Location
	1,  // 21: matching.GetDriverResponse.driver:type_name -> matching.Driver
	0,  // 22: matching.GetActiveDriversRequest.center:type_name -> matching.Location
	1,  // 23: matching.GetActiveDriversResponse.drivers:type_name -> matching.Driver
	5,  // 24: matching.GetActiveDriversResponse.metadata:type_name -> matching.MatchingMetadata
	6,  // 25: matching.BatchUpdateDriversRequest.updates:type_name -> matching.DriverLocationUpdate
	28, // 26: matching.GetMatchingStatsRequest.from_time:type_name -> google.protobuf.Timestamp
	28, // 27: matching.GetMatchingStatsRequest.to_time:type_name -> google.protobuf.Timestamp
	27, // 28: matching.MatchingStats.vehicle_type_distribution:type_name -> matching.MatchingStats.VehicleTypeDistributionEntry
	21, // 29: matching.GetMatchingStatsResponse.stats:type_name -> matching.MatchingStats
	7,  // 30: matching.MatchingService.FindNearbyDrivers:input_type -> matching.FindNearbyDriversRequest
	9,  // 31: matching.MatchingService.MatchDriver:input_type -> matching.MatchDriverRequest
	12, // 32: matching.MatchingService.UpdateDriverLocation:input_type -> matching.UpdateDriverLocationRequest
	14, // 33: matching.MatchingService.GetDriver:input_type -> matching.GetDriverRequest
	16, // 34: matching.MatchingService.GetActiveDrivers:input_type -> matching.GetActiveDriversRequest
	18, // 35: matching.MatchingService.BatchUpdateDrivers:input_type -> matching.BatchUpdateDriversRequest
	20, // 36: matching.MatchingService.GetMatchingStats:input_type -> matching.GetMatchingStatsRequest
	6,  // 37: matching.MatchingService.StreamDriverUpdates:input_type -> matching.DriverLocationUpdate
	8,  // 38: matching.MatchingService.FindNearbyDrivers:output_type -> matching.FindNearbyDriversResponse
	11, // 39: matching.MatchingService.MatchDriver:output_type -> matching.MatchDriverResponse
	13, // 40: matching.MatchingService.UpdateDriverLocation:output_type -> matching.UpdateDriverLocationResponse
	15, // 41: matching.MatchingService.GetDriver:output_type -> matching.GetDriverResponse
	17, // 42: matching.MatchingService.GetActiveDrivers:output_type -> matching.GetActiveDriversResponse
	19, // 43: matching.MatchingService.BatchUpdateDrivers:output_type -> matching.BatchUpdateDriversResponse
	22, // 44: matching.MatchingService.GetMatchingStats:output_type -> matching.GetMatchingStatsResponse
	13, // 45: matching.MatchingService.StreamDriverUpdates:output_type -> matching.UpdateDriverLocationResponse
	38, // [38:46] is the sub-list for method output_type
	30, // [30:38] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_proto_matching_matching_proto_init() }
func file_proto_matching_matching_proto_init() {
	if File_proto_matching_matching_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_matching_matching_proto_rawDesc), len(file_proto_matching_matching_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_matching_matching_proto_goTypes,
		DependencyIndexes: file_proto_matching_matching_proto_depIdxs,
		MessageInfos:      file_proto_matching_matching_proto_msgTypes,
	}.Build()
	File_proto_matching_matching_proto = out.File
	file_proto_matching_matching_proto_goTypes = nil
	file_proto_matching_matching_proto_depIdxs = nil
}
