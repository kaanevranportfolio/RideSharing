// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: shared/proto/matching/matching.proto

package matching

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchingService_FindNearbyDrivers_FullMethodName    = "/matching.MatchingService/FindNearbyDrivers"
	MatchingService_MatchDriver_FullMethodName          = "/matching.MatchingService/MatchDriver"
	MatchingService_UpdateDriverLocation_FullMethodName = "/matching.MatchingService/UpdateDriverLocation"
	MatchingService_GetDriver_FullMethodName            = "/matching.MatchingService/GetDriver"
	MatchingService_GetActiveDrivers_FullMethodName     = "/matching.MatchingService/GetActiveDrivers"
	MatchingService_BatchUpdateDrivers_FullMethodName   = "/matching.MatchingService/BatchUpdateDrivers"
	MatchingService_GetMatchingStats_FullMethodName     = "/matching.MatchingService/GetMatchingStats"
	MatchingService_StreamDriverUpdates_FullMethodName  = "/matching.MatchingService/StreamDriverUpdates"
)

// MatchingServiceClient is the client API for MatchingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MatchingService defines the gRPC service for driver-rider matching
type MatchingServiceClient interface {
	FindNearbyDrivers(ctx context.Context, in *FindNearbyDriversRequest, opts ...grpc.CallOption) (*FindNearbyDriversResponse, error)
	MatchDriver(ctx context.Context, in *MatchDriverRequest, opts ...grpc.CallOption) (*MatchDriverResponse, error)
	UpdateDriverLocation(ctx context.Context, in *UpdateDriverLocationRequest, opts ...grpc.CallOption) (*UpdateDriverLocationResponse, error)
	GetDriver(ctx context.Context, in *GetDriverRequest, opts ...grpc.CallOption) (*GetDriverResponse, error)
	GetActiveDrivers(ctx context.Context, in *GetActiveDriversRequest, opts ...grpc.CallOption) (*GetActiveDriversResponse, error)
	BatchUpdateDrivers(ctx context.Context, in *BatchUpdateDriversRequest, opts ...grpc.CallOption) (*BatchUpdateDriversResponse, error)
	GetMatchingStats(ctx context.Context, in *GetMatchingStatsRequest, opts ...grpc.CallOption) (*GetMatchingStatsResponse, error)
	// Real-time streaming
	StreamDriverUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DriverLocationUpdate, UpdateDriverLocationResponse], error)
}

type matchingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingServiceClient(cc grpc.ClientConnInterface) MatchingServiceClient {
	return &matchingServiceClient{cc}
}

func (c *matchingServiceClient) FindNearbyDrivers(ctx context.Context, in *FindNearbyDriversRequest, opts ...grpc.CallOption) (*FindNearbyDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindNearbyDriversResponse)
	err := c.cc.Invoke(ctx, MatchingService_FindNearbyDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) MatchDriver(ctx context.Context, in *MatchDriverRequest, opts ...grpc.CallOption) (*MatchDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchDriverResponse)
	err := c.cc.Invoke(ctx, MatchingService_MatchDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) UpdateDriverLocation(ctx context.Context, in *UpdateDriverLocationRequest, opts ...grpc.CallOption) (*UpdateDriverLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDriverLocationResponse)
	err := c.cc.Invoke(ctx, MatchingService_UpdateDriverLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) GetDriver(ctx context.Context, in *GetDriverRequest, opts ...grpc.CallOption) (*GetDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDriverResponse)
	err := c.cc.Invoke(ctx, MatchingService_GetDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) GetActiveDrivers(ctx context.Context, in *GetActiveDriversRequest, opts ...grpc.CallOption) (*GetActiveDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveDriversResponse)
	err := c.cc.Invoke(ctx, MatchingService_GetActiveDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) BatchUpdateDrivers(ctx context.Context, in *BatchUpdateDriversRequest, opts ...grpc.CallOption) (*BatchUpdateDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateDriversResponse)
	err := c.cc.Invoke(ctx, MatchingService_BatchUpdateDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) GetMatchingStats(ctx context.Context, in *GetMatchingStatsRequest, opts ...grpc.CallOption) (*GetMatchingStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMatchingStatsResponse)
	err := c.cc.Invoke(ctx, MatchingService_GetMatchingStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) StreamDriverUpdates(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DriverLocationUpdate, UpdateDriverLocationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MatchingService_ServiceDesc.Streams[0], MatchingService_StreamDriverUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DriverLocationUpdate, UpdateDriverLocationResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatchingService_StreamDriverUpdatesClient = grpc.BidiStreamingClient[DriverLocationUpdate, UpdateDriverLocationResponse]

// MatchingServiceServer is the server API for MatchingService service.
// All implementations must embed UnimplementedMatchingServiceServer
// for forward compatibility.
//
// MatchingService defines the gRPC service for driver-rider matching
type MatchingServiceServer interface {
	FindNearbyDrivers(context.Context, *FindNearbyDriversRequest) (*FindNearbyDriversResponse, error)
	MatchDriver(context.Context, *MatchDriverRequest) (*MatchDriverResponse, error)
	UpdateDriverLocation(context.Context, *UpdateDriverLocationRequest) (*UpdateDriverLocationResponse, error)
	GetDriver(context.Context, *GetDriverRequest) (*GetDriverResponse, error)
	GetActiveDrivers(context.Context, *GetActiveDriversRequest) (*GetActiveDriversResponse, error)
	BatchUpdateDrivers(context.Context, *BatchUpdateDriversRequest) (*BatchUpdateDriversResponse, error)
	GetMatchingStats(context.Context, *GetMatchingStatsRequest) (*GetMatchingStatsResponse, error)
	// Real-time streaming
	StreamDriverUpdates(grpc.BidiStreamingServer[DriverLocationUpdate, UpdateDriverLocationResponse]) error
	mustEmbedUnimplementedMatchingServiceServer()
}

// UnimplementedMatchingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchingServiceServer struct{}

func (UnimplementedMatchingServiceServer) FindNearbyDrivers(context.Context, *FindNearbyDriversRequest) (*FindNearbyDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNearbyDrivers not implemented")
}
func (UnimplementedMatchingServiceServer) MatchDriver(context.Context, *MatchDriverRequest) (*MatchDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchDriver not implemented")
}
func (UnimplementedMatchingServiceServer) UpdateDriverLocation(context.Context, *UpdateDriverLocationRequest) (*UpdateDriverLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriverLocation not implemented")
}
func (UnimplementedMatchingServiceServer) GetDriver(context.Context, *GetDriverRequest) (*GetDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriver not implemented")
}
func (UnimplementedMatchingServiceServer) GetActiveDrivers(context.Context, *GetActiveDriversRequest) (*GetActiveDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveDrivers not implemented")
}
func (UnimplementedMatchingServiceServer) BatchUpdateDrivers(context.Context, *BatchUpdateDriversRequest) (*BatchUpdateDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateDrivers not implemented")
}
func (UnimplementedMatchingServiceServer) GetMatchingStats(context.Context, *GetMatchingStatsRequest) (*GetMatchingStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchingStats not implemented")
}
func (UnimplementedMatchingServiceServer) StreamDriverUpdates(grpc.BidiStreamingServer[DriverLocationUpdate, UpdateDriverLocationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDriverUpdates not implemented")
}
func (UnimplementedMatchingServiceServer) mustEmbedUnimplementedMatchingServiceServer() {}
func (UnimplementedMatchingServiceServer) testEmbeddedByValue()                         {}

// UnsafeMatchingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingServiceServer will
// result in compilation errors.
type UnsafeMatchingServiceServer interface {
	mustEmbedUnimplementedMatchingServiceServer()
}

func RegisterMatchingServiceServer(s grpc.ServiceRegistrar, srv MatchingServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatchingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchingService_ServiceDesc, srv)
}

func _MatchingService_FindNearbyDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNearbyDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).FindNearbyDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_FindNearbyDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).FindNearbyDrivers(ctx, req.(*FindNearbyDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_MatchDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).MatchDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_MatchDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).MatchDriver(ctx, req.(*MatchDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_UpdateDriverLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).UpdateDriverLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_UpdateDriverLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).UpdateDriverLocation(ctx, req.(*UpdateDriverLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_GetDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).GetDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_GetDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).GetDriver(ctx, req.(*GetDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_GetActiveDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).GetActiveDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_GetActiveDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).GetActiveDrivers(ctx, req.(*GetActiveDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_BatchUpdateDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).BatchUpdateDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_BatchUpdateDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).BatchUpdateDrivers(ctx, req.(*BatchUpdateDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_GetMatchingStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchingStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).GetMatchingStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_GetMatchingStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).GetMatchingStats(ctx, req.(*GetMatchingStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_StreamDriverUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MatchingServiceServer).StreamDriverUpdates(&grpc.GenericServerStream[DriverLocationUpdate, UpdateDriverLocationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatchingService_StreamDriverUpdatesServer = grpc.BidiStreamingServer[DriverLocationUpdate, UpdateDriverLocationResponse]

// MatchingService_ServiceDesc is the grpc.ServiceDesc for MatchingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matching.MatchingService",
	HandlerType: (*MatchingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindNearbyDrivers",
			Handler:    _MatchingService_FindNearbyDrivers_Handler,
		},
		{
			MethodName: "MatchDriver",
			Handler:    _MatchingService_MatchDriver_Handler,
		},
		{
			MethodName: "UpdateDriverLocation",
			Handler:    _MatchingService_UpdateDriverLocation_Handler,
		},
		{
			MethodName: "GetDriver",
			Handler:    _MatchingService_GetDriver_Handler,
		},
		{
			MethodName: "GetActiveDrivers",
			Handler:    _MatchingService_GetActiveDrivers_Handler,
		},
		{
			MethodName: "BatchUpdateDrivers",
			Handler:    _MatchingService_BatchUpdateDrivers_Handler,
		},
		{
			MethodName: "GetMatchingStats",
			Handler:    _MatchingService_GetMatchingStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDriverUpdates",
			Handler:       _MatchingService_StreamDriverUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shared/proto/matching/matching.proto",
}
