// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: shared/proto/trip/trip.proto

package trip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TripService_CreateTrip_FullMethodName             = "/trip.TripService/CreateTrip"
	TripService_GetTrip_FullMethodName                = "/trip.TripService/GetTrip"
	TripService_UpdateTripStatus_FullMethodName       = "/trip.TripService/UpdateTripStatus"
	TripService_GetUserTrips_FullMethodName           = "/trip.TripService/GetUserTrips"
	TripService_GetActiveTrips_FullMethodName         = "/trip.TripService/GetActiveTrips"
	TripService_SubscribeToTripUpdates_FullMethodName = "/trip.TripService/SubscribeToTripUpdates"
)

// TripServiceClient is the client API for TripService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TripService defines the gRPC service for trip management
type TripServiceClient interface {
	CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...grpc.CallOption) (*CreateTripResponse, error)
	GetTrip(ctx context.Context, in *GetTripRequest, opts ...grpc.CallOption) (*GetTripResponse, error)
	UpdateTripStatus(ctx context.Context, in *UpdateTripStatusRequest, opts ...grpc.CallOption) (*UpdateTripStatusResponse, error)
	GetUserTrips(ctx context.Context, in *GetUserTripsRequest, opts ...grpc.CallOption) (*GetUserTripsResponse, error)
	GetActiveTrips(ctx context.Context, in *GetActiveTripsRequest, opts ...grpc.CallOption) (*GetActiveTripsResponse, error)
	// Real-time features
	SubscribeToTripUpdates(ctx context.Context, in *SubscribeToTripUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TripUpdateEvent], error)
}

type tripServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTripServiceClient(cc grpc.ClientConnInterface) TripServiceClient {
	return &tripServiceClient{cc}
}

func (c *tripServiceClient) CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...grpc.CallOption) (*CreateTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTripResponse)
	err := c.cc.Invoke(ctx, TripService_CreateTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetTrip(ctx context.Context, in *GetTripRequest, opts ...grpc.CallOption) (*GetTripResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTripResponse)
	err := c.cc.Invoke(ctx, TripService_GetTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) UpdateTripStatus(ctx context.Context, in *UpdateTripStatusRequest, opts ...grpc.CallOption) (*UpdateTripStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTripStatusResponse)
	err := c.cc.Invoke(ctx, TripService_UpdateTripStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetUserTrips(ctx context.Context, in *GetUserTripsRequest, opts ...grpc.CallOption) (*GetUserTripsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTripsResponse)
	err := c.cc.Invoke(ctx, TripService_GetUserTrips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetActiveTrips(ctx context.Context, in *GetActiveTripsRequest, opts ...grpc.CallOption) (*GetActiveTripsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveTripsResponse)
	err := c.cc.Invoke(ctx, TripService_GetActiveTrips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) SubscribeToTripUpdates(ctx context.Context, in *SubscribeToTripUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TripUpdateEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TripService_ServiceDesc.Streams[0], TripService_SubscribeToTripUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToTripUpdatesRequest, TripUpdateEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TripService_SubscribeToTripUpdatesClient = grpc.ServerStreamingClient[TripUpdateEvent]

// TripServiceServer is the server API for TripService service.
// All implementations must embed UnimplementedTripServiceServer
// for forward compatibility.
//
// TripService defines the gRPC service for trip management
type TripServiceServer interface {
	CreateTrip(context.Context, *CreateTripRequest) (*CreateTripResponse, error)
	GetTrip(context.Context, *GetTripRequest) (*GetTripResponse, error)
	UpdateTripStatus(context.Context, *UpdateTripStatusRequest) (*UpdateTripStatusResponse, error)
	GetUserTrips(context.Context, *GetUserTripsRequest) (*GetUserTripsResponse, error)
	GetActiveTrips(context.Context, *GetActiveTripsRequest) (*GetActiveTripsResponse, error)
	// Real-time features
	SubscribeToTripUpdates(*SubscribeToTripUpdatesRequest, grpc.ServerStreamingServer[TripUpdateEvent]) error
	mustEmbedUnimplementedTripServiceServer()
}

// UnimplementedTripServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTripServiceServer struct{}

func (UnimplementedTripServiceServer) CreateTrip(context.Context, *CreateTripRequest) (*CreateTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrip not implemented")
}
func (UnimplementedTripServiceServer) GetTrip(context.Context, *GetTripRequest) (*GetTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrip not implemented")
}
func (UnimplementedTripServiceServer) UpdateTripStatus(context.Context, *UpdateTripStatusRequest) (*UpdateTripStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTripStatus not implemented")
}
func (UnimplementedTripServiceServer) GetUserTrips(context.Context, *GetUserTripsRequest) (*GetUserTripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTrips not implemented")
}
func (UnimplementedTripServiceServer) GetActiveTrips(context.Context, *GetActiveTripsRequest) (*GetActiveTripsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTrips not implemented")
}
func (UnimplementedTripServiceServer) SubscribeToTripUpdates(*SubscribeToTripUpdatesRequest, grpc.ServerStreamingServer[TripUpdateEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTripUpdates not implemented")
}
func (UnimplementedTripServiceServer) mustEmbedUnimplementedTripServiceServer() {}
func (UnimplementedTripServiceServer) testEmbeddedByValue()                     {}

// UnsafeTripServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripServiceServer will
// result in compilation errors.
type UnsafeTripServiceServer interface {
	mustEmbedUnimplementedTripServiceServer()
}

func RegisterTripServiceServer(s grpc.ServiceRegistrar, srv TripServiceServer) {
	// If the following call pancis, it indicates UnimplementedTripServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TripService_ServiceDesc, srv)
}

func _TripService_CreateTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CreateTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CreateTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CreateTrip(ctx, req.(*CreateTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetTrip(ctx, req.(*GetTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_UpdateTripStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTripStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).UpdateTripStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_UpdateTripStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).UpdateTripStatus(ctx, req.(*UpdateTripStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetUserTrips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTripsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetUserTrips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetUserTrips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetUserTrips(ctx, req.(*GetUserTripsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetActiveTrips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveTripsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetActiveTrips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetActiveTrips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetActiveTrips(ctx, req.(*GetActiveTripsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_SubscribeToTripUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToTripUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TripServiceServer).SubscribeToTripUpdates(m, &grpc.GenericServerStream[SubscribeToTripUpdatesRequest, TripUpdateEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TripService_SubscribeToTripUpdatesServer = grpc.ServerStreamingServer[TripUpdateEvent]

// TripService_ServiceDesc is the grpc.ServiceDesc for TripService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TripService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trip.TripService",
	HandlerType: (*TripServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrip",
			Handler:    _TripService_CreateTrip_Handler,
		},
		{
			MethodName: "GetTrip",
			Handler:    _TripService_GetTrip_Handler,
		},
		{
			MethodName: "UpdateTripStatus",
			Handler:    _TripService_UpdateTripStatus_Handler,
		},
		{
			MethodName: "GetUserTrips",
			Handler:    _TripService_GetUserTrips_Handler,
		},
		{
			MethodName: "GetActiveTrips",
			Handler:    _TripService_GetActiveTrips_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToTripUpdates",
			Handler:       _TripService_SubscribeToTripUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shared/proto/trip/trip.proto",
}
