// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pricing.proto

package pricing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PricingService_GetPriceEstimate_FullMethodName          = "/pricing.PricingService/GetPriceEstimate"
	PricingService_GetMultipleEstimates_FullMethodName      = "/pricing.PricingService/GetMultipleEstimates"
	PricingService_CalculateFinalFare_FullMethodName        = "/pricing.PricingService/CalculateFinalFare"
	PricingService_GetSurgePricing_FullMethodName           = "/pricing.PricingService/GetSurgePricing"
	PricingService_GetVehicleTypes_FullMethodName           = "/pricing.PricingService/GetVehicleTypes"
	PricingService_UpdateSurgePricing_FullMethodName        = "/pricing.PricingService/UpdateSurgePricing"
	PricingService_GetPricingStats_FullMethodName           = "/pricing.PricingService/GetPricingStats"
	PricingService_SubscribeToPricingUpdates_FullMethodName = "/pricing.PricingService/SubscribeToPricingUpdates"
)

// PricingServiceClient is the client API for PricingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PricingService defines the gRPC service for fare calculation
type PricingServiceClient interface {
	GetPriceEstimate(ctx context.Context, in *GetPriceEstimateRequest, opts ...grpc.CallOption) (*GetPriceEstimateResponse, error)
	GetMultipleEstimates(ctx context.Context, in *GetMultipleEstimatesRequest, opts ...grpc.CallOption) (*GetMultipleEstimatesResponse, error)
	CalculateFinalFare(ctx context.Context, in *CalculateFinalFareRequest, opts ...grpc.CallOption) (*CalculateFinalFareResponse, error)
	GetSurgePricing(ctx context.Context, in *GetSurgePricingRequest, opts ...grpc.CallOption) (*GetSurgePricingResponse, error)
	GetVehicleTypes(ctx context.Context, in *GetVehicleTypesRequest, opts ...grpc.CallOption) (*GetVehicleTypesResponse, error)
	UpdateSurgePricing(ctx context.Context, in *UpdateSurgePricingRequest, opts ...grpc.CallOption) (*UpdateSurgePricingResponse, error)
	GetPricingStats(ctx context.Context, in *GetPricingStatsRequest, opts ...grpc.CallOption) (*GetPricingStatsResponse, error)
	// Real-time features
	SubscribeToPricingUpdates(ctx context.Context, in *SubscribeToPricingUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PricingUpdateEvent], error)
}

type pricingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPricingServiceClient(cc grpc.ClientConnInterface) PricingServiceClient {
	return &pricingServiceClient{cc}
}

func (c *pricingServiceClient) GetPriceEstimate(ctx context.Context, in *GetPriceEstimateRequest, opts ...grpc.CallOption) (*GetPriceEstimateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPriceEstimateResponse)
	err := c.cc.Invoke(ctx, PricingService_GetPriceEstimate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) GetMultipleEstimates(ctx context.Context, in *GetMultipleEstimatesRequest, opts ...grpc.CallOption) (*GetMultipleEstimatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMultipleEstimatesResponse)
	err := c.cc.Invoke(ctx, PricingService_GetMultipleEstimates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) CalculateFinalFare(ctx context.Context, in *CalculateFinalFareRequest, opts ...grpc.CallOption) (*CalculateFinalFareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateFinalFareResponse)
	err := c.cc.Invoke(ctx, PricingService_CalculateFinalFare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) GetSurgePricing(ctx context.Context, in *GetSurgePricingRequest, opts ...grpc.CallOption) (*GetSurgePricingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSurgePricingResponse)
	err := c.cc.Invoke(ctx, PricingService_GetSurgePricing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) GetVehicleTypes(ctx context.Context, in *GetVehicleTypesRequest, opts ...grpc.CallOption) (*GetVehicleTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVehicleTypesResponse)
	err := c.cc.Invoke(ctx, PricingService_GetVehicleTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) UpdateSurgePricing(ctx context.Context, in *UpdateSurgePricingRequest, opts ...grpc.CallOption) (*UpdateSurgePricingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSurgePricingResponse)
	err := c.cc.Invoke(ctx, PricingService_UpdateSurgePricing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) GetPricingStats(ctx context.Context, in *GetPricingStatsRequest, opts ...grpc.CallOption) (*GetPricingStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPricingStatsResponse)
	err := c.cc.Invoke(ctx, PricingService_GetPricingStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingServiceClient) SubscribeToPricingUpdates(ctx context.Context, in *SubscribeToPricingUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PricingUpdateEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PricingService_ServiceDesc.Streams[0], PricingService_SubscribeToPricingUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToPricingUpdatesRequest, PricingUpdateEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PricingService_SubscribeToPricingUpdatesClient = grpc.ServerStreamingClient[PricingUpdateEvent]

// PricingServiceServer is the server API for PricingService service.
// All implementations must embed UnimplementedPricingServiceServer
// for forward compatibility.
//
// PricingService defines the gRPC service for fare calculation
type PricingServiceServer interface {
	GetPriceEstimate(context.Context, *GetPriceEstimateRequest) (*GetPriceEstimateResponse, error)
	GetMultipleEstimates(context.Context, *GetMultipleEstimatesRequest) (*GetMultipleEstimatesResponse, error)
	CalculateFinalFare(context.Context, *CalculateFinalFareRequest) (*CalculateFinalFareResponse, error)
	GetSurgePricing(context.Context, *GetSurgePricingRequest) (*GetSurgePricingResponse, error)
	GetVehicleTypes(context.Context, *GetVehicleTypesRequest) (*GetVehicleTypesResponse, error)
	UpdateSurgePricing(context.Context, *UpdateSurgePricingRequest) (*UpdateSurgePricingResponse, error)
	GetPricingStats(context.Context, *GetPricingStatsRequest) (*GetPricingStatsResponse, error)
	// Real-time features
	SubscribeToPricingUpdates(*SubscribeToPricingUpdatesRequest, grpc.ServerStreamingServer[PricingUpdateEvent]) error
	mustEmbedUnimplementedPricingServiceServer()
}

// UnimplementedPricingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPricingServiceServer struct{}

func (UnimplementedPricingServiceServer) GetPriceEstimate(context.Context, *GetPriceEstimateRequest) (*GetPriceEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceEstimate not implemented")
}
func (UnimplementedPricingServiceServer) GetMultipleEstimates(context.Context, *GetMultipleEstimatesRequest) (*GetMultipleEstimatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultipleEstimates not implemented")
}
func (UnimplementedPricingServiceServer) CalculateFinalFare(context.Context, *CalculateFinalFareRequest) (*CalculateFinalFareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFinalFare not implemented")
}
func (UnimplementedPricingServiceServer) GetSurgePricing(context.Context, *GetSurgePricingRequest) (*GetSurgePricingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurgePricing not implemented")
}
func (UnimplementedPricingServiceServer) GetVehicleTypes(context.Context, *GetVehicleTypesRequest) (*GetVehicleTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicleTypes not implemented")
}
func (UnimplementedPricingServiceServer) UpdateSurgePricing(context.Context, *UpdateSurgePricingRequest) (*UpdateSurgePricingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSurgePricing not implemented")
}
func (UnimplementedPricingServiceServer) GetPricingStats(context.Context, *GetPricingStatsRequest) (*GetPricingStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPricingStats not implemented")
}
func (UnimplementedPricingServiceServer) SubscribeToPricingUpdates(*SubscribeToPricingUpdatesRequest, grpc.ServerStreamingServer[PricingUpdateEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToPricingUpdates not implemented")
}
func (UnimplementedPricingServiceServer) mustEmbedUnimplementedPricingServiceServer() {}
func (UnimplementedPricingServiceServer) testEmbeddedByValue()                        {}

// UnsafePricingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricingServiceServer will
// result in compilation errors.
type UnsafePricingServiceServer interface {
	mustEmbedUnimplementedPricingServiceServer()
}

func RegisterPricingServiceServer(s grpc.ServiceRegistrar, srv PricingServiceServer) {
	// If the following call pancis, it indicates UnimplementedPricingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PricingService_ServiceDesc, srv)
}

func _PricingService_GetPriceEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).GetPriceEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_GetPriceEstimate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).GetPriceEstimate(ctx, req.(*GetPriceEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_GetMultipleEstimates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultipleEstimatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).GetMultipleEstimates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_GetMultipleEstimates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).GetMultipleEstimates(ctx, req.(*GetMultipleEstimatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_CalculateFinalFare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateFinalFareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).CalculateFinalFare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_CalculateFinalFare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).CalculateFinalFare(ctx, req.(*CalculateFinalFareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_GetSurgePricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurgePricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).GetSurgePricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_GetSurgePricing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).GetSurgePricing(ctx, req.(*GetSurgePricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_GetVehicleTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).GetVehicleTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_GetVehicleTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).GetVehicleTypes(ctx, req.(*GetVehicleTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_UpdateSurgePricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSurgePricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).UpdateSurgePricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_UpdateSurgePricing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).UpdateSurgePricing(ctx, req.(*UpdateSurgePricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_GetPricingStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPricingStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingServiceServer).GetPricingStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PricingService_GetPricingStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingServiceServer).GetPricingStats(ctx, req.(*GetPricingStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingService_SubscribeToPricingUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToPricingUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PricingServiceServer).SubscribeToPricingUpdates(m, &grpc.GenericServerStream[SubscribeToPricingUpdatesRequest, PricingUpdateEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PricingService_SubscribeToPricingUpdatesServer = grpc.ServerStreamingServer[PricingUpdateEvent]

// PricingService_ServiceDesc is the grpc.ServiceDesc for PricingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PricingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pricing.PricingService",
	HandlerType: (*PricingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPriceEstimate",
			Handler:    _PricingService_GetPriceEstimate_Handler,
		},
		{
			MethodName: "GetMultipleEstimates",
			Handler:    _PricingService_GetMultipleEstimates_Handler,
		},
		{
			MethodName: "CalculateFinalFare",
			Handler:    _PricingService_CalculateFinalFare_Handler,
		},
		{
			MethodName: "GetSurgePricing",
			Handler:    _PricingService_GetSurgePricing_Handler,
		},
		{
			MethodName: "GetVehicleTypes",
			Handler:    _PricingService_GetVehicleTypes_Handler,
		},
		{
			MethodName: "UpdateSurgePricing",
			Handler:    _PricingService_UpdateSurgePricing_Handler,
		},
		{
			MethodName: "GetPricingStats",
			Handler:    _PricingService_GetPricingStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToPricingUpdates",
			Handler:       _PricingService_SubscribeToPricingUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pricing.proto",
}
