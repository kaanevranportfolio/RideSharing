## version field removed (obsolete)
services:
  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    container_name: rideshare-user-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - HTTP_PORT=${TEST_USER_SERVICE_HTTP_PORT-8051}
      - DB_HOST=${TEST_DB_HOST-postgres-test}
      - DB_PORT=${TEST_DB_PORT-5432}
      - DB_NAME=${TEST_DB_NAME-rideshare_test}
      - DB_USERNAME=${TEST_DB_USERNAME-postgres}
      - DB_PASSWORD=${TEST_POSTGRES_PASSWORD-testpass_change_me}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
    ports:
      - "8051:8051"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8051/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    container_name: rideshare-api-gateway-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - HTTP_PORT=${TEST_API_GATEWAY_HTTP_PORT-8080}
      - USER_SERVICE_URL=http://user-service:8051
      - VEHICLE_SERVICE_URL=http://vehicle-service:8052
      - GEO_SERVICE_URL=http://geo-service:8053
      - MATCHING_SERVICE_URL=http://matching-service:8084
      - TRIP_SERVICE_URL=http://trip-service:8085
      - PAYMENT_SERVICE_URL=http://payment-service:9087
    ports:
      - "8080:8080"
    depends_on:
      user-service:
        condition: service_healthy
      vehicle-service:
        condition: service_healthy
      geo-service:
        condition: service_healthy
      matching-service:
        condition: service_healthy
      trip-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  postgres-test:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${TEST_POSTGRES_DB-rideshare_test}
  # volumes removed; only root-level volumes block should exist

  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    # volumes removed; only root-level volumes block should exist
    depends_on:
      postgres-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:50051"]
      interval: 10s
      timeout: 5s
      retries: 5

  vehicle-service:
    build:
      context: .
      dockerfile: ./services/vehicle-service/Dockerfile
    container_name: rideshare-vehicle-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - GRPC_PORT=${TEST_VEHICLE_SERVICE_GRPC_PORT-50052}
      - HTTP_PORT=${TEST_VEHICLE_SERVICE_HTTP_PORT-8052}
      - DB_HOST=${TEST_DB_HOST-postgres-test}
      - DB_PORT=${TEST_DB_PORT-5432}
      - DB_NAME=${TEST_DB_NAME-rideshare_test}
      - DB_USERNAME=${TEST_DB_USERNAME-postgres}
      - DB_PASSWORD=${TEST_POSTGRES_PASSWORD-testpass_change_me}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
    ports:
      - "50052:50052"
      - "8052:8052"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:50052"]
      interval: 10s
      timeout: 5s
      retries: 5


  geo-service:
    build:
      context: .
      dockerfile: ./services/geo-service/Dockerfile
    container_name: rideshare-geo-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - GRPC_PORT=${TEST_GEO_SERVICE_GRPC_PORT-50053}
      - HTTP_PORT=${TEST_GEO_SERVICE_HTTP_PORT-8053}
      - DB_HOST=${TEST_MONGO_HOST-mongodb-test}
      - DB_PORT=${TEST_MONGO_PORT-27017}
      - DB_NAME=${TEST_MONGO_DB_NAME-rideshare_test}
      - DB_USERNAME=${TEST_MONGO_DB_USERNAME-admin}
      - DB_PASSWORD=${TEST_MONGO_DB_PASSWORD-testpass123}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
    ports:
      - "50053:50053"
      - "8053:8053"
    depends_on:
  # Removed undefined mongodb-test dependency
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:50053"]
      interval: 10s
      timeout: 5s
      retries: 5

  matching-service:
    build:
      context: .
      dockerfile: ./services/matching-service/Dockerfile
    container_name: rideshare-matching-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - HTTP_PORT=${TEST_MATCHING_SERVICE_HTTP_PORT-8084}
      - DB_HOST=${TEST_DB_HOST-postgres-test}
      - DB_PORT=${TEST_DB_PORT-5432}
      - DB_NAME=${TEST_DB_NAME-rideshare_test}
      - DB_USERNAME=${TEST_DB_USERNAME-postgres}
      - DB_PASSWORD=${TEST_POSTGRES_PASSWORD-testpass_change_me}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
    ports:
      - "8084:8084"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:8054"]
      interval: 10s
      timeout: 5s
      retries: 5

  trip-service:
    build:
      context: .
      dockerfile: ./services/trip-service/Dockerfile
    container_name: rideshare-trip-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - HTTP_PORT=${TEST_TRIP_SERVICE_HTTP_PORT-8085}
      - DB_HOST=${TEST_DB_HOST-postgres-test}
      - DB_PORT=${TEST_DB_PORT-5432}
      - DB_NAME=${TEST_DB_NAME-rideshare_test}
      - DB_USERNAME=${TEST_DB_USERNAME-postgres}
      - DB_PASSWORD=${TEST_POSTGRES_PASSWORD-testpass_change_me}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
    ports:
      - "8085:8085"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:50053"]
      interval: 10s
      timeout: 5s
      retries: 5

  payment-service:
    build:
      context: .
      dockerfile: ./services/payment-service/Dockerfile
    container_name: rideshare-payment-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - HTTP_PORT=${TEST_PAYMENT_SERVICE_HTTP_PORT-9087}
      - DB_HOST=${TEST_DB_HOST-postgres-test}
      - DB_PORT=${TEST_DB_PORT-5432}
      - DB_NAME=${TEST_DB_NAME-rideshare_test}
      - DB_USERNAME=${TEST_DB_USERNAME-postgres}
      - DB_PASSWORD=${TEST_POSTGRES_PASSWORD-testpass_change_me}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
    ports:
      - "9087:9087"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:8055"]
      interval: 10s
      timeout: 5s
      retries: 5

  unit-test-runner:
    build:
      context: .
      dockerfile: test-containers/unit-test/Dockerfile
    container_name: rideshare-unit-test-runner
    working_dir: /app
    volumes:
      - .:/app

  integration-test-runner:
    build:
      context: .
      dockerfile: test-containers/integration-test/Dockerfile
    container_name: rideshare-integration-test-runner
    working_dir: /app
    volumes:
      - .:/app

  # Lightweight Unit Test Runner (No Dependencies)
  unit-tests:
    image: golang:1.23-alpine
    container_name: rideshare-unit-tests
    working_dir: /app
    volumes:
      - .:/app
    environment:
      - GO111MODULE=on
      - CGO_ENABLED=0
    command: ["sh", "/app/scripts/docker-unit-test.sh"]

  # Full Integration Test Runner (With All Dependencies)
  integration-tests:
    image: golang:1.23-alpine
    container_name: rideshare-integration-tests
    working_dir: /app
    volumes:
      - .:/app
    environment:
      - GO111MODULE=on
      - CGO_ENABLED=0
      - API_GATEWAY_URL=http://api-gateway:8080
      - USER_SERVICE_URL=http://user-service:8051
      - VEHICLE_SERVICE_URL=http://vehicle-service:8052
      - GEO_SERVICE_URL=http://geo-service:8053
      - MATCHING_SERVICE_URL=http://matching-service:8084
      - TRIP_SERVICE_URL=http://trip-service:8085
      - PAYMENT_SERVICE_URL=http://payment-service:9087
      - POSTGRES_HOST=postgres-test
      - POSTGRES_PORT=5432
      - POSTGRES_DB=rideshare_test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=testpass_change_me
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
    depends_on:
      api-gateway:
        condition: service_healthy
      user-service:
        condition: service_healthy
      vehicle-service:
        condition: service_healthy
      geo-service:
        condition: service_healthy
      matching-service:
        condition: service_healthy
      trip-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: ["sh", "/app/scripts/docker-integration-test.sh"]
        # Enhanced Docker Integration Test Runner with Explicit Results
        echo ''
        echo '╔══════════════════════════════════════════════════════════════════════════════╗'
        echo '║ � RIDESHARE PLATFORM - DOCKER INTEGRATION TEST RUNNER                       ║'
        echo '╚══════════════════════════════════════════════════════════════════════════════╝'
        echo ''
        echo 'Test Configuration:'
        echo '  ℹ️ Container: rideshare-integration-tests'
        echo '  ℹ️ Go Version: '$(go version)
        echo '  ℹ️ Working Directory: /app'
        echo '  ℹ️ Execution Mode: integration tests with full stack'
        echo '  ℹ️ Timestamp: '$(date +%Y%m%d_%H%M%S)
        echo ''
        
        # Install required packages
        echo '┌─ ⚙️ Environment Setup ─────────────────────────────────────────────────────┐'
        echo '   🔄 Installing dependencies...'
        apk add --no-cache git make bash postgresql-client redis curl > /dev/null 2>&1
        echo '   ✅ Dependencies installed'
        echo '└─────────────────────────────────────────────────────────────────────────────┘'
        echo ''
        
        # Service health verification
        echo '┌─ 🔍 Service Health Verification ───────────────────────────────────────────┐'
        echo '   ⏳ Waiting for services to be ready...'
        sleep 15
        
        # Check each service
        for service in api-gateway:8080 user-service:8051 vehicle-service:8052 geo-service:8053; do
          service_name=\$(echo \$service | cut -d: -f1)
          service_port=\$(echo \$service | cut -d: -f2)
          echo \"   🔍 Checking \$service_name health...\"
          
          for i in \$(seq 1 30); do
            if curl -f http://\$service/health > /dev/null 2>&1; then
              echo \"   ✅ \$service_name is ready\"
              break
            fi
            if [ \$i -eq 30 ]; then
              echo \"   ⚠️ \$service_name health check timeout\"
            fi
            sleep 2
          done
        done
        echo '└─────────────────────────────────────────────────────────────────────────────┘'
        echo ''
        
        # Initialize counters
        TOTAL_TESTS=0
        PASSED_TESTS=0
        FAILED_TESTS=0
        
        echo '┌─ 🔗 DOCKER INTEGRATION TESTS ──────────────────────────────────────────────┐'
        
        # Run integration tests with proper build tags
        echo '   🔎 Running integration tests in: tests/integration'
        echo '      🔄 Executing: go test -v ./integration/... -tags=integration -timeout=300s'
        cd tests
        if go test -v ./integration/... -tags=integration -timeout=300s 2>&1; then
          echo '      ✅ Integration tests passed'
          PASSED_TESTS=\$((PASSED_TESTS + 1))
        else
          echo '      ❌ Integration tests failed'
          FAILED_TESTS=\$((FAILED_TESTS + 1))
        fi
        TOTAL_TESTS=\$((TOTAL_TESTS + 1))
        cd /app
        echo ''
        
        echo '└─────────────────────────────────────────────────────────────────────────────┘'
        echo ''
        
        # Summary
        echo '📊 DOCKER INTEGRATION TESTS SUMMARY:'
        echo \"   ✅ Passed: \$PASSED_TESTS\"
        echo \"   ❌ Failed: \$FAILED_TESTS\"
        echo \"   📊 Total: \$TOTAL_TESTS\"
        
        if [ \$FAILED_TESTS -eq 0 ]; then
          SUCCESS_RATE=100
          STATUS='✅ SUCCESS'
        else
          SUCCESS_RATE=\$((\$PASSED_TESTS * 100 / \$TOTAL_TESTS))
          STATUS='❌ PARTIAL'
        fi
        
        echo \"   📈 Success Rate: \$SUCCESS_RATE%\"
        echo \"   🎯 Status: \$STATUS\"
        echo ''
        
        echo '╔══════════════════════════════════════════════════════════════════════════════╗'
        echo '║                🎯 DOCKER INTEGRATION TEST RESULTS SUMMARY                   ║'
        echo '╠══════════════════════════════════════════════════════════════════════════════╣'
        printf '║ Test Type    │ Status      │ Pass │ Fail │ Total │ Success Rate │ Environment ║\n'
        echo '╠══════════════════════════════════════════════════════════════════════════════╣'
        printf \"║ Integration  │ %-10s │ %-4s │ %-4s │ %-5s │ %-11s │ Docker+Stack║\n\" \"\$STATUS\" \"\$PASSED_TESTS\" \"\$FAILED_TESTS\" \"\$TOTAL_TESTS\" \"\$SUCCESS_RATE%\"
        echo '╚══════════════════════════════════════════════════════════════════════════════╝'
        echo ''
        
        if [ \$FAILED_TESTS -gt 0 ]; then
          echo \"❌ Integration tests failed: \$FAILED_TESTS failure(s) detected in Docker environment.\"
          exit 1
        else
          echo '✅ All Docker integration tests completed successfully!'
          exit 0
        fi
      "

volumes:
  postgres_test_data:
  mongodb_test_data:
  redis_test_data:




