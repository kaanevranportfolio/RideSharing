version: '3.8'

services:
  # Database Services
  postgres-test:
    image: postgres:15
    container_name: rideshare-postgres-test
    environment:
      POSTGRES_DB: rideshare_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpass_change_me
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-test:
    image: redis:7-alpine
    container_name: rideshare-redis-test
    ports:
      - "6380:6379"
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb-test:
    image: mongo:7
    container_name: rideshare-mongodb-test
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: testpass_change_me
      MONGO_INITDB_DATABASE: rideshare_test
    ports:
      - "27018:27017"
    volumes:
      - mongodb_test_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Services
  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    container_name: rideshare-api-gateway-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - HTTP_PORT=${TEST_API_GATEWAY_PORT-8080}
      - USER_SERVICE_URL=${TEST_USER_SERVICE_URL-user-service:50051}
      - VEHICLE_SERVICE_URL=${TEST_VEHICLE_SERVICE_URL-vehicle-service:50052}
      - GEO_SERVICE_URL=${TEST_GEO_SERVICE_URL-geo-service:50053}
      - MATCHING_SERVICE_URL=${TEST_MATCHING_SERVICE_URL-matching-service:50084}
      - TRIP_SERVICE_URL=${TEST_TRIP_SERVICE_URL-trip-service:50085}
      - PAYMENT_SERVICE_URL=${TEST_PAYMENT_SERVICE_URL-payment-service:50087}
    ports:
      - "8080:8080"
    depends_on:
      user-service:
        condition: service_healthy
      vehicle-service:
        condition: service_healthy
      geo-service:
        condition: service_healthy
      matching-service:
        condition: service_healthy
      trip-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    container_name: rideshare-user-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - GRPC_PORT=${TEST_USER_SERVICE_GRPC_PORT-50051}
      - HTTP_PORT=${TEST_USER_SERVICE_HTTP_PORT-8051}
      - DB_HOST=${TEST_DB_HOST-postgres-test}
      - DB_PORT=${TEST_DB_PORT-5432}
      - DB_NAME=${TEST_DB_NAME-rideshare_test}
      - DB_USERNAME=${TEST_DB_USERNAME-postgres}
      - DB_PASSWORD=${TEST_POSTGRES_PASSWORD-testpass_change_me}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
    ports:
      - "50051:50051"
      - "8051:8051"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:50051"]
      interval: 10s
      timeout: 5s
      retries: 5

  vehicle-service:
    build:
      context: .
      dockerfile: ./services/vehicle-service/Dockerfile
    container_name: rideshare-vehicle-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - GRPC_PORT=${TEST_VEHICLE_SERVICE_GRPC_PORT-50052}
      - HTTP_PORT=${TEST_VEHICLE_SERVICE_HTTP_PORT-8052}
      - DB_HOST=${TEST_DB_HOST-postgres-test}
      - DB_PORT=${TEST_DB_PORT-5432}
      - DB_NAME=${TEST_DB_NAME-rideshare_test}
      - DB_USERNAME=${TEST_DB_USERNAME-postgres}
      - DB_PASSWORD=${TEST_POSTGRES_PASSWORD-testpass_change_me}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
    ports:
      - "50052:50052"
      - "8052:8052"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:50052"]
      interval: 10s
      timeout: 5s
      retries: 5

  geo-service:
    build:
      context: .
      dockerfile: ./services/geo-service/Dockerfile
    container_name: rideshare-geo-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - GRPC_PORT=${TEST_GEO_SERVICE_GRPC_PORT-50053}
      - HTTP_PORT=${TEST_GEO_SERVICE_HTTP_PORT-8053}
      - DB_HOST=${TEST_DB_HOST-postgres-test}
      - DB_PORT=${TEST_DB_PORT-5432}
      - DB_NAME=${TEST_DB_NAME-rideshare_test}
      - DB_USERNAME=${TEST_DB_USERNAME-postgres}
      - DB_PASSWORD=${TEST_POSTGRES_PASSWORD-testpass_change_me}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
    ports:
      - "50053:50053"
      - "8053:8053"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:50053"]
      interval: 10s
      timeout: 5s
      retries: 5

  matching-service:
    build:
      context: .
      dockerfile: ./services/matching-service/Dockerfile
    container_name: rideshare-matching-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - GRPC_PORT=${TEST_MATCHING_SERVICE_GRPC_PORT-50084}
      - HTTP_PORT=${TEST_MATCHING_SERVICE_HTTP_PORT-8084}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
      - GEO_SERVICE_URL=${TEST_GEO_SERVICE_URL-geo-service:50053}
    ports:
      - "50084:50084"
      - "8084:8084"
    depends_on:
      redis-test:
        condition: service_healthy
      geo-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:50084"]
      interval: 10s
      timeout: 5s
      retries: 5

  trip-service:
    build:
      context: .
      dockerfile: ./services/trip-service/Dockerfile
    container_name: rideshare-trip-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - GRPC_PORT=${TEST_TRIP_SERVICE_GRPC_PORT-50085}
      - HTTP_PORT=${TEST_TRIP_SERVICE_HTTP_PORT-8085}
      - DB_HOST=${TEST_DB_HOST-postgres-test}
      - DB_PORT=${TEST_DB_PORT-5432}
      - DB_NAME=${TEST_DB_NAME-rideshare_test}
      - DB_USERNAME=${TEST_DB_USERNAME-postgres}
      - DB_PASSWORD=${TEST_POSTGRES_PASSWORD-testpass_change_me}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
      - USER_SERVICE_URL=${TEST_USER_SERVICE_URL-user-service:50051}
      - VEHICLE_SERVICE_URL=${TEST_VEHICLE_SERVICE_URL-vehicle-service:50052}
      - GEO_SERVICE_URL=${TEST_GEO_SERVICE_URL-geo-service:50053}
      - MATCHING_SERVICE_URL=${TEST_MATCHING_SERVICE_URL-matching-service:50084}
      - PAYMENT_SERVICE_URL=${TEST_PAYMENT_SERVICE_URL-payment-service:50087}
    ports:
      - "50085:50085"
      - "8085:8085"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      user-service:
        condition: service_healthy
      vehicle-service:
        condition: service_healthy
      geo-service:
        condition: service_healthy
      matching-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:50085"]
      interval: 10s
      timeout: 5s
      retries: 5

  payment-service:
    build:
      context: .
      dockerfile: ./services/payment-service/Dockerfile
    container_name: rideshare-payment-service-test
    environment:
      - ENVIRONMENT=${TEST_ENVIRONMENT-test}
      - LOG_LEVEL=${TEST_LOG_LEVEL-info}
      - GRPC_PORT=${TEST_PAYMENT_SERVICE_GRPC_PORT-50087}
      - HTTP_PORT=${TEST_PAYMENT_SERVICE_HTTP_PORT-9087}
      - MONGODB_URI=${TEST_MONGODB_URI-mongodb://admin:testpass_change_me@mongodb-test:27017/rideshare_test?authSource=admin}
      - REDIS_HOST=${TEST_REDIS_HOST-redis-test}
      - REDIS_PORT=${TEST_REDIS_PORT-6379}
    ports:
      - "50087:50087"
      - "9087:9087"
    depends_on:
      mongodb-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc-health-probe", "-addr=localhost:50087"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Testing Services
  unit-tests:
    image: golang:1.23-alpine
    container_name: rideshare-unit-tests
    working_dir: /app
    volumes:
      - .:/app
    environment:
      - GO111MODULE=on
      - CGO_ENABLED=0
    command: ["sh", "/app/scripts/docker-unit-test.sh"]

  integration-tests:
    image: golang:1.23-alpine
    container_name: rideshare-integration-tests
    working_dir: /app
    volumes:
      - .:/app
    environment:
      - GO111MODULE=on
      - CGO_ENABLED=0
      - API_GATEWAY_URL=http://api-gateway:8080
      - USER_SERVICE_URL=http://user-service:8051
      - VEHICLE_SERVICE_URL=http://vehicle-service:8052
      - GEO_SERVICE_URL=http://geo-service:8053
      - MATCHING_SERVICE_URL=http://matching-service:8084
      - TRIP_SERVICE_URL=http://trip-service:8085
      - PAYMENT_SERVICE_URL=http://payment-service:9087
      - POSTGRES_HOST=postgres-test
      - POSTGRES_PORT=5432
      - POSTGRES_DB=rideshare_test
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=testpass_change_me
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
    depends_on:
      api-gateway:
        condition: service_healthy
      user-service:
        condition: service_healthy
      vehicle-service:
        condition: service_healthy
      geo-service:
        condition: service_healthy
      matching-service:
        condition: service_healthy
      trip-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: ["sh", "/app/scripts/docker-integration-test.sh"]

volumes:
  postgres_test_data:
  mongodb_test_data:
  redis_test_data:
